data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw(plot.margin = unit(c(0, 0, 0, 3.3), "cm")),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(3.3, 0, 0, 0), "cm")),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
plt
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0, 0, 0, 3.3), "cm")),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
png.netw1 = readPNG('../../templates/fig_3/networks.png')
cairo_pdf("../../figures/fig_distances.pdf", width=10, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.86, width=0.68)
dev.off()
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0, 0, 3.3, 0), "cm")),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
png.netw1 = readPNG('../../templates/fig_3/networks.png')
cairo_pdf("../../figures/fig_distances.pdf", width=10, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.86, width=0.68)
dev.off()
png.netw1 = readPNG('../../templates/fig_4/networks_fig4.png')
cairo_pdf("../../figures/fig_distances.pdf", width=10, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.1, width=0.68)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=8, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.1, width=0.68)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.1, width=0.68)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.1, width=0.8)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.5, y=0.15, width=0.8)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.55, y=0.13, width=0.8)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.55, y=0.13, width=0.8)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.55, y=0.13, width=0.9)
dev.off()
cairo_pdf("../../figures/fig_distances.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.54, y=0.13, width=0.9)
dev.off()
#########################################
sims.dirs <- list.dirs("../../simul/fig_1", recursive = FALSE)
angle = c(0.785, 0, -0.393)
of        <- "fig1"
modulo <- pi
#####################
M.factor <- 1500
G.factor <- 0.25
S.factor <- 1
# layout(mat = laymat) # Widths of the two columns
png(file="../../figures/fig1_part1.png", width=400, height=400)
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", 0.785), full.names=TRUE)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(0.785, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(0.785, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(0.785, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="A/", yaxt="n", ylab = "M direction", xlab = "Generations", col=alpha(colors[factor(dfang1$V10)],0.2), mgp = c(1.75, 0.75, 0))
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="",xcoord=c(1000, 10000),ycoord=c(-2.5, 0.5),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE,mgp = c(0, 0, 0))
legend <- FALSE
dev.off()
########
png(file="../../figures/fig1_part2.png", width=400, height=400)
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", 0), full.names=TRUE)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(0, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(0, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(0, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="B/", yaxt="n", ylab = "M direction", xlab = "Generations", col=alpha(colors[factor(dfang1$V10)],0.2), mgp = c(1.75, 0.75, 0))
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="",xcoord=c(0, 10000),ycoord=c(-2.6, 0.3),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE,mgp = c(0, 0, 0))
dev.off()
#######
png(file="../../figures/fig1_part3.png", width=400, height=400)
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", -0.393), full.names=TRUE)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(-0.393, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(-0.393, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(-0.393, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="C/", yaxt="n", ylab = "M direction", xlab = "Generations", col=alpha(colors[factor(dfang1$V10)],0.2), mgp = c(1.75, 0.75, 0))
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="", xcoord=c(0, 10000),ycoord=c(-1, 2),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE,mgp = c(0, 0, 0))
dev.off()
# dev.off()
# print("Ellipses done !")
plot1 = readPNG('../../figures/fig1_part1.png')
plot2 = readPNG('../../figures/fig1_part2.png')
plot3 = readPNG('../../figures/fig1_part3.png')
cairo_pdf("../../figures/fig_1test.pdf", width=10, height=8)
grid.arrange(
pfig2,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(plot1, x=0.16, y=0.8, width=0.36)
grid.raster(plot2, x=0.5, y=0.8, width=0.36)
grid.raster(plot3, x=0.84, y=0.8, width=0.36)
dev.off()
netw_names <- as_labeller(c(
`2-full` = "E/ GRN model",
`1-mult` = "D/ Multilinear Model"
))
#With eccentricity
pfig2 <- ggplot(data=df.fig2, aes(ang_S, ang_M))+
coord_fixed(ratio = 1, xlim = c(-1.5,1.5), ylim = c(-pi/2-0.2,pi/2+0.2), expand = TRUE, clip = "on")+
geom_abline(colour="#666666")+
geom_abline(intercept=pi, colour="#666666")+
geom_abline(intercept=-pi, colour="#666666")+
geom_point(aes(y=ang_M, col=1-ecc_M), alpha=0.16, show.legend = FALSE)+
geom_point(aes(y=ang_M_mpi, col=1-ecc_M), alpha=0.16, show.legend = FALSE)+
geom_point(aes(y=ang_M_ppi, col=1-ecc_M), alpha=0.16, show.legend = TRUE)+
labs(y="M direction", x="S direction", fill = expression("\u03BE\u03B1"))+
scale_color_viridis_c(option = "plasma")+
labs(col = "M Eccentricity")+
scale_x_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))+
scale_y_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))
pfig2 <- pfig2 + facet_wrap(pop ~., labeller = as_labeller(netw_names),  ncol=3) + theme(strip.background = element_blank())+ theme_bw() #, strip.text = element_blank()
pfig2
pfig2 <- ggplot(data=df.fig2, aes(ang_S, ang_M))+
coord_fixed(ratio = 1, xlim = c(-1.5,1.5), ylim = c(-pi/2-0.2,pi/2+0.2), expand = TRUE, clip = "on")+
geom_abline(colour="#666666")+
geom_abline(intercept=pi, colour="#666666")+
geom_abline(intercept=-pi, colour="#666666")+
geom_point(aes(y=ang_M, col=1-ecc_M), alpha=0.16, show.legend = FALSE)+
geom_point(aes(y=ang_M_mpi, col=1-ecc_M), alpha=0.16, show.legend = FALSE)+
geom_point(aes(y=ang_M_ppi, col=1-ecc_M), alpha=0.16, show.legend = TRUE)+
labs(y="M direction", x="S direction", fill = expression("\u03BE\u03B1"))+
scale_color_viridis_c(option = "plasma")+
labs(col = "M Eccentricity")+
scale_x_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))+
scale_y_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))
pfig2 <- pfig2 + facet_wrap(pop ~., labeller = as_labeller(netw_names),  ncol=3) + theme(strip.background = element_blank())+
theme_bw()+ theme(plot.margin = unit(c(9, 0, 0, 0), "cm"))
pfig2
plot1 = readPNG('../../figures/fig1_part1.png')
plot2 = readPNG('../../figures/fig1_part2.png')
plot3 = readPNG('../../figures/fig1_part3.png')
cairo_pdf("../../figures/fig_1test.pdf", width=10, height=8)
grid.arrange(
pfig2,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(plot1, x=0.16, y=0.8, width=0.36)
grid.raster(plot2, x=0.5, y=0.8, width=0.36)
grid.raster(plot3, x=0.84, y=0.8, width=0.36)
dev.off()
################################################################################
#Print paramfiles Figure 4
#####################
sims.dirs <- list.dirs("../../templates/fig_4_check", recursive = FALSE)
#Properties of S for Wagner model :
def.e <- 0.12 #1 #eccentricity S
def.s <- 10 #size S
#####################
#This loop creates a parameter template for each angle given.
#Angle values :
values <- list(-1.5, 1.5,-1.4, 1.4, -1, 1, -0.5, 0.5, -0.7, -0.2, 0.2, -0.3, 0.3, -0.4, 0.4, 0, -0.6, 0.6, -0.9, 0.9, 0.7, -0.8, 0.8, -1.1, 1.1, -1.2, 1.2,-1.3, 1.3, -1.4, 1.4,-0.1, 0.1)
ifelse(!dir.exists(file.path("../../simul/fig_4_check")), dir.create("../../simul/fig_4_check"), FALSE)
for (sims.dir in sims.dirs) {
param.template = file.path(sims.dir, "template.temp")
new.dir<- str_split(sims.dir, "../../templates/", n=2, simplify = TRUE)
dir <- sprintf("../../simul/%s", new.dir[2])
dir.create(dir)
for (a in values) {
param.file <- file.path(dir, sprintf("simuangle%s.par", round(a, digits=3)))
param.from.sel.features(param.template, param.file, angle=a, size=def.s, eccentricity=def.e)
}
}
print("Parameter files fig 3 done !")
source("../functions_R/All_functions.R")
library(png)
library(igraph)
sims.dirs <-  list.dirs("../../simul/fig_4", recursive = FALSE)
df.fig4 <- df.data(sims.dirs, pattern = "../../simul/fig_4/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
for (i in 1:nrow(df.fig4)){
W <- t(matrix(as.numeric(df.fig4[i,10:45]), ncol = 6))
W[,1:6]<-ifelse(abs(W[,1:6])>0.2,1,W[,1:6])
W[,1:6]<-ifelse(abs(W[,1:6])<0.2,0,W[,1:6])
df.fig4[i,]$siz_M <- mean(distances(graph_from_adjacency_matrix(as.table(W)))[1,2],
distances(graph_from_adjacency_matrix(as.table(W)))[1,2])
# df.fig4[i,]$siz_M <-abs(W[1,2])+abs(W[2,1])
}
library(ggstatsplot)
library(tidyverse)
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0, 0, 3.3, 0), "cm")),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
plt
ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0, 0, 3.3, 0), "cm")),
pairwise.comparisons=TRUE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
#####################
sims.dirs <- list.dirs("../../templates/fig_4_check", recursive = FALSE)
#Properties of S for Wagner model :
def.e <- 0.12 #1 #eccentricity S
def.s <- 10 #size S
#####################
#This loop creates a parameter template for each angle given.
#Angle values :
values <- list(-1.5, 1.5,-1.4, 1.4, -1, 1, -0.5, 0.5, -0.7, -0.2, 0.2, -0.3, 0.3, -0.4, 0.4, 0, -0.6, 0.6, -0.9, 0.9, 0.7, -0.8, 0.8, -1.1, 1.1, -1.2, 1.2,-1.3, 1.3, -1.4, 1.4,-0.1, 0.1)
ifelse(!dir.exists(file.path("../../simul/fig_3")), dir.create("../../simul/fig_3"), FALSE)
for (sims.dir in sims.dirs) {
param.template = file.path(sims.dir, "template.temp")
new.dir<- str_split(sims.dir, "../../templates/", n=2, simplify = TRUE)
dir <- sprintf("../../simul/%s", new.dir[2])
dir.create(dir)
for (a in values) {
param.file <- file.path(dir, sprintf("simuangle%s.par", round(a, digits=3)))
param.from.sel.features(param.template, param.file, angle=a, size=def.s, eccentricity=def.e)
}
}
print("Parameter files fig 3 done !")
#####################
sims.dirs <- list.dirs("../../templates/fig_4_check", recursive = FALSE)
#Properties of S for Wagner model :
def.e <- 0.12 #1 #eccentricity S
def.s <- 10 #size S
#####################
#This loop creates a parameter template for each angle given.
#Angle values :
values <- list(-1.5, 1.5,-1.4, 1.4, -1, 1, -0.5, 0.5, -0.7, -0.2, 0.2, -0.3, 0.3, -0.4, 0.4, 0, -0.6, 0.6, -0.9, 0.9, 0.7, -0.8, 0.8, -1.1, 1.1, -1.2, 1.2,-1.3, 1.3, -1.4, 1.4,-0.1, 0.1)
ifelse(!dir.exists(file.path("../../simul/fig_3")), dir.create("../../simul/fig_3"), FALSE)
for (sims.dir in sims.dirs) {
param.template = file.path(sims.dir, "template.temp")
new.dir<- str_split(sims.dir, "../../templates/", n=2, simplify = TRUE)
dir <- sprintf("../../simul/%s", new.dir[2])
dir.create(dir)
for (a in values) {
param.file <- file.path(dir, sprintf("simuangle%s.par", round(a, digits=3)))
param.from.sel.features(param.template, param.file, angle=a, size=def.s, eccentricity=def.e)
}
}
print("Parameter files fig 3 done !")
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0, 0, 3.3, 0), "cm")),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
# pdf("../../figures/PLS.pdf", width=7, height=7)
pdf("../../figures/PLS.pdf", width=6, height=6)
plot(pls1, what="variables", main = "A/ PLS: Cercle of Correlations")
dev.off()
source("../functions_R/All_functions.R")
library(plsdepot)
#######################
sims.dirs <- c("../../simul/fig_3/2-full")
of        <- "PLS_ACP_topo2"
what      <- "angle" #"angle" or "ecc"
where     <- "cercle"
#######################
df.topo <- df.data(sims.dirs, pattern = "../../simul/fig_2/", variable="netw", file_size=220000, w_of_6=TRUE, network=TRUE)
dfx <- df.topo[,10:45]
dfy <- as.data.frame(df.topo$ang_M)
df <-as.data.frame(cbind(dfx,dfy))
df[] <- lapply( df, as.numeric)
df <- df.topo[,10:45]
df$M_direction <- df.topo$ang_M
df[] <- lapply( df, as.numeric)
pls1 = plsreg1( df[,c(2:7, 9:14, 16:21, 23:28, 30:35)], df[,37, drop = FALSE], comps = 2)
summary(pls1)
pls1$cor.xyt
g1 <- ggplot(df, aes(x=B_A, y=A_B, col=M_direction))+
coord_fixed(ratio =1, ylim = c(-0.5,0.5), xlim = c(-0.5,0.5), expand = FALSE, clip = "on")+
geom_point()+
scale_color_gradientn(colours = c("yellow", "red", "blue", "yellow"), limits=c(-pi/2, pi/2), breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))+
ggtitle("B/ Regulation between A and B")+
theme_bw()
pdf("../../figures/PLS.pdf", width=6, height=6)
plot(pls1, what="variables", main = "A/ PLS: Cercle of Correlations")
dev.off()
pdf("../../figures/PLS.pdf", width=6, height=6)
plot(pls1, what="variables", main = "PLS: Cercle of Correlations")
dev.off()
#####################
sims.dirs <- list.dirs("../../simul/fig_3", recursive = FALSE)
modulo <- pi
#####################
#Data
df.fig3 <- df.data(sims.dirs, pattern = "../../simul/fig_3/", variable="netw", file_size=15000, w_of_6=TRUE, network=FALSE)
netw_names <- as_labeller(c(
`1-full_-0.5_fixed` = "A/ AB regulation fixed at -0.5",
`3-full_0_fixed` = "C/ AB regulation fixed at 0",
`2-full_0.5_fixed` = "B/ AB regulation fixed at 0.5"
))
#With eccentricity
pfig3 <- ggplot(data=df.fig3, aes(ang_S, ang_M))+
coord_fixed(ratio = 1, xlim = c(-1.5,1.5), ylim = c(-pi/2-0.2,pi/2+0.2), expand = TRUE, clip = "on")+
geom_abline(colour="#666666")+
geom_abline(intercept=pi, colour="#666666")+
geom_abline(intercept=-pi, colour="#666666")+
geom_point(aes(y=ang_M, col=1-ecc_M), alpha=0.16, show.legend = FALSE)+
geom_point(aes(y=ang_M_mpi, col=1-ecc_M), alpha=0.16, show.legend = FALSE)+
geom_point(aes(y=ang_M_ppi, col=1-ecc_M), alpha=0.16, show.legend = TRUE)+
labs(y="M direction", x="S direction", fill = expression("\u03BE\u03B1"))+
scale_color_viridis_c(option = "plasma")+
labs(col = "M Eccentricity")+
scale_x_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))+
scale_y_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))
pfig3 <- pfig3 + facet_wrap(pop ~., labeller = as_labeller(netw_names),  ncol=3) +
theme_bw()+ theme(plot.margin = unit(c(3.3, 0, 0, 0), "cm")) #, strip.text = element_blank()
pfig3
png.netw1 = readPNG('../../templates/fig_3/networks.png')
cairo_pdf("../../figures/fig_3.pdf", width=10, height=5.8)
grid.arrange(
pfig3,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.46, y=0.86, width=0.68)
dev.off()
source("../functions_R/All_functions.R")
library(png)
library(igraph)
#####################
# sims.dirs <-  c("../../simul/fig_2/2-full")
sims.dirs <-  list.dirs("../../simul/fig_4", recursive = FALSE)
df.fig4 <- df.data(sims.dirs, pattern = "../../simul/fig_4/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
library(ggstatsplot)
library(tidyverse)
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0, 0, 3.3, 0), "cm")),
pairwise.comparisons=TRUE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab="Network", ylab="Mutational coexpression",
title = "Mutational co-expression evolved with different distance between A and B"
)
plt
