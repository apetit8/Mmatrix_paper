values <- list(-1.5, 1.5,-1.4, 1.4, -1, 1, -0.5, 0.5, -0.7, -0.2, 0.2, -0.3, 0.3, -0.4, 0.4, 0, -0.6, 0.6, -0.9, 0.9, 0.7, -0.8, 0.8, -1.1, 1.1, -1.2, 1.2,-1.3, 1.3, -1.4, 1.4,-0.1, 0.1)
ifelse(!dir.exists(file.path("../../simul/fig_1de")), dir.create("../../simul/fig_1de"), FALSE)
sel.genes <- 0
i=1
for (sims.dir in sims.dirs) {
param.template = file.path(sims.dir, "template.temp")
new.dir<- str_split(sims.dir, "../../templates/", n=2, simplify = TRUE)
dir <- sprintf("../../simul/%s", new.dir[2])
dir.create(dir)
for (a in values) {
param.file <- file.path(dir, sprintf("simuangle%s.par", round(a, digits=3)))
param.from.sel.features(param.template, param.file, angle=a, size=def.s, eccentricity=def.e, sel.genes=sel.genes)
i=i+1
if(i==3){sel.genes <- c(3:(2+(n.genes-2)/2))}
}
}
source("../functions_R/All_functions.R")
library(png)
library(igraph)
library(ggstatsplot)
library(tidyverse)
#####################
sims.dirs <-  list.dirs("../../simul/fig_4", recursive = FALSE)
#####################
df.fig4 <- df.data(sims.dirs, pattern = "../../simul/fig_4/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
plt <- ggbetweenstats(
data = df.fig4,
x = pop,
y = corr,
centrality.plotting=FALSE,
plot.type = "box",
ggtheme = ggplot2::theme_bw()+theme(plot.margin = unit(c(0.1, 0, 3, 0), "cm")),
ggplot.component = scale_x_discrete(labels = c('Full Network','Direct regulation\nonly','Distance: 1 node','Distance: 2 nodes','Distance: 3 nodes')),
pairwise.comparisons=FALSE,
bf.message=FALSE,
results.subtitle=FALSE,
xlab=" ", ylab="Mutational correlation r(M)",
title = NULL
)
plt
png.netw1 = readPNG('../../templates/fig_4/networks_fig4.png')
cairo_pdf("../../figures/fig_4.pdf", width=7, height=5.8)
grid.arrange(
plt,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
grid.raster(png.netw1, x=0.54, y=0.13, width=0.95)
dev.off()
plot.igraph(G, edge.width=abs(E(G)$weight)*8, edge.color=ifelse(E(G)$weight > 0, "black","red"),
layout =  layout_in_circle, vertex.label = c("a","b","c","d","e","f"), #layout_with_lgl,
edge.curved=TRUE)
W <- matrix(c(0,
as.numeric(cor.test(df.topo$ang_M, df.topo$a_b)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$a_c)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$a_d)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$a_e)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$a_f)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$b_a)$estimate),0,
as.numeric(cor.test(df.topo$ang_M, df.topo$b_c)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$b_d)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$b_e)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$b_f)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$c_a)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$c_b)$estimate), 0,
as.numeric(cor.test(df.topo$ang_M, df.topo$c_d)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$c_e)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$c_f)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$d_a)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$d_b)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$d_c)$estimate),0,
as.numeric(cor.test(df.topo$ang_M, df.topo$d_e)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$d_f)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$e_a)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$e_b)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$e_c)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$e_d)$estimate),0,
as.numeric(cor.test(df.topo$ang_M, df.topo$e_f)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$f_a)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$f_b)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$f_c)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$f_d)$estimate),
as.numeric(cor.test(df.topo$ang_M, df.topo$f_e)$estimate),0
), ncol = sqrt(length(df.topo[1,10:45])))
#W with the expected order
W1 <- W
#Column then row
#D -> A
W1[,1] <- W[,4]
W1[1,] <- W[4,]
#A -> C
W1[,3] <- W[,1]
W1[3,] <- W[1,]
#C -> D
W1[,4] <- W[,3]
W1[4,] <- W[3,]
#C -> D
W1[,4] <- W[,3]
W1[4,] <- W[3,]
G <- as.directed(graph.adjacency(t(W), weighted = T))
V(G)$color <- c("lightyellow", "lightpink", "lightpink", "lightyellow", "grey", "grey")
deg <- degree(G, mode = "all")
# pdf("../../figures/test_igraph.pdf", width=8, height=8)
plot.igraph(G, edge.width=abs(E(G)$weight)*8, edge.color=ifelse(E(G)$weight > 0, "black","red"),
layout =  layout_in_circle, vertex.label = c("a","b","c","d","e","f"), #layout_with_lgl,
edge.curved=TRUE)
# dev.off()
G <- as.directed(graph.adjacency(t(W1), weighted = T))
V(G)$color <- c("lightyellow", "lightpink", "lightpink", "lightyellow", "grey", "grey")
deg <- degree(G, mode = "all")
# pdf("../../figures/test_igraph.pdf", width=8, height=8)
plot.igraph(G, edge.width=abs(E(G)$weight)*8, edge.color=ifelse(E(G)$weight > 0, "black","red"),
layout =  layout_in_circle, vertex.label = c("a","b","c","d","e","f"), #layout_with_lgl,
edge.curved=TRUE)
# dev.off()
W1
W1 <- W
#Column then row
#D -> A
W1[,1] <- W[,4]
W1[1,] <- W[4,]
#A -> C
W1[,3] <- W[,1]
W1[3,] <- W[1,]
#C -> D
W1[,4] <- W[,3]
W1[4,] <- W[3,]
W1
W[,4]
W[4,]
W
plot.igraph(G, edge.width=abs(E(G)$weight)*8, edge.color=ifelse(E(G)$weight > 0, "black","red"),
layout =  layout_in_circle, vertex.label = c("d","b","a","c","e","f"), #layout_with_lgl,
edge.curved=TRUE)
source("../functions_R/All_functions.R")
library(png)
#####################
sims.dirs <- list.dirs("../../simul/fig_1de", recursive = FALSE)
modulo <- pi
#####################
#Data
df.fig1de <- df.data(sims.dirs, pattern = "../../simul/fig_1de/", variable="netw", file_size=15000, w_of_6=TRUE, network=FALSE)
netw_names <- as_labeller(c(
`3-grn` = "GRN model",
`2-fkl` = "FKL model",
`1-mult` = "Multilinear Model"
))
#With eccentricity
pfig1de <- ggplot(data=df.fig1de, aes(ang_S, ang_M))+
coord_fixed(ratio = 1, xlim = c(-1.5,1.5), ylim = c(-pi/2-0.2,pi/2+0.2), expand = TRUE, clip = "on")+
geom_abline(colour="#666666")+
geom_abline(intercept=pi, colour="#666666")+
geom_abline(intercept=-pi, colour="#666666")+
geom_point(aes(y=ang_M, col=ecc_M), alpha=0.2, show.legend = FALSE)+
geom_point(aes(y=ang_M_mpi, col=ecc_M), alpha=0.2, show.legend = FALSE)+
geom_point(aes(y=ang_M_ppi, col=ecc_M), alpha=0.2, show.legend = TRUE)+
labs(y=expression(paste("Direction of mutational effects ",alpha, "(M)")), x=expression(paste("Fitness function, ",alpha, "(S)")), fill = expression("\u03BE\u03B1"))+
scale_color_viridis_c(option = "plasma")+
labs(col = "M Eccentricity\ne(M)")+
scale_x_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))+
scale_y_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))
pfig1de <- pfig1de + facet_wrap(pop ~., labeller = as_labeller(netw_names),  ncol=3) + theme(strip.background = element_blank())+ theme_bw() #, strip.text = element_blank()
pfig1de
#Fig supp
source("../functions_R/All_functions.R")
#####################
sims.dirs <- list.dirs("../../simul/fig_1de/3-grn", recursive = FALSE)
#####################
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_1de/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
sims.dirs
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_1de/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
#####################
sims.dirs <- list.dirs("../../simul/fig_1de", recursive = FALSE)
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_1de/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
df.stability <- data.frame()
for (i in 1:length(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,11:ncol(df.stab)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,10],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
View(df.stability)
View(df.stab)
df.stability <- data.frame()
for (i in 1:length(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,11:ncol(df.stab)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,46],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
warnings()
stablefrom(W)
#Fig supp
source("../functions_R/All_functions.R")
stablefrom(W)
source("~/Work/Mmatrix_paper/scripts/functions_R/All_functions.R")
stablefrom(W)
ff
source("~/Work/Mmatrix_paper/scripts/functions_R/All_functions.R")
source("~/Work/Mmatrix_paper/scripts/functions_R/All_functions.R")
stablefrom(W)
ff
source("~/Work/Mmatrix_paper/scripts/functions_R/All_functions.R")
stablefrom(W)
ff
#Fig supp
source("../functions_R/All_functions.R")
#Fig supp
source("../functions_R/All_functions.R")
W
W <- (matrix(as.numeric(df.stab[i,10:ncol(df.stab)-1]), ncol = 6) )
W
(matrix(as.numeric(df.stab[i,10:ncol(df.stab)-1]), ncol = 6) )
View(df.stab)
ncol(df.stab)-1
(matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
W <- (matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
W
stablefrom(W)
ff
ff
W
pheno.from.W(W, ..., full=TRUE)
c
source("~/Work/Mmatrix_paper/scripts/functions_R/All_functions.R")
stablefrom(W)
df.stability <- data.frame()
for (i in 1:length(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,46],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
hist(df.stability$n.step)
hist(df.stability$n.step, breaks=10)
nrow(df.stab)
df.stability <- data.frame()
for (i in 1:nrow(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,46],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
hist(df.stability$n.step, breaks=10)
hist(df.stability$n.step, breaks=5)
hist(df.stability$n.step, breaks=6)
hist(df.stability$n.step, breaks=8)
hist(df.stability$n.step, breaks=10)
#####################
sims.dirs <- list.dirs("../../simul/fig_3", recursive = FALSE)
#####################
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_3/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
df.stability <- data.frame()
for (i in 1:nrow(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,46],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
hist(df.stability$n.step, breaks=10)
hist(df.stability$n.step, breaks=15)
hist(df.stability$n.step, breaks=8)
source("../functions_R/All_functions.R")
#####################
sims.dirs <- c("../../simul/fig_3","fig_1de")
#####################
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
#####################
sims.dirs <- c("fig_1de")
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
#####################
sims.dirs <- c("../../simul/fig_3", recursive = FALSE)
#####################
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_3/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
#####################
sims.dirs <- list.dirs("../../simul/fig_3", recursive = FALSE)
sims.dirs
#####################
sims.dirs <- c(list.dirs("../../simul/fig_3", recursive = FALSE),"../../simul/fig_1de/3-grn")
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_3/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
df.stability <- data.frame()
for (i in 1:nrow(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,46],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
hist(df.stability$n.step, breaks=8)
hist(df.stability$n.step, breaks=7)
hist(df.stability$n.step, breaks=6)
hist(df.stability$n.step, breaks=9)
hist(df.stability$n.step, breaks=5)
hist(df.stability$n.step, breaks=2)
hist(df.stability$n.step, breaks=5)
hist(df.stability$n.step, breaks=4)
hist(df.stability$n.step, breaks=12)
hist(df.stability$n.step, breaks=10)
hist(df.stability$n.step, breaks=9)
#####################
sims.dirs <- c(list.dirs("../../simul/fig_3", recursive = FALSE),"../../simul/fig_1de/3-grn",list.dirs("../../simul/fig_4", recursive = FALSE))
df.stab <- df.data(sims.dirs, pattern = "../../simul/fig_3/", variable="netw", file_size=15000, w_of_6=TRUE, network=TRUE)
df.stability <- data.frame()
for (i in 1:nrow(df.stab)) {
W <- (matrix(as.numeric(df.stab[i,10:(ncol(df.stab)-1)]), ncol = 6) )
st <- data.frame(
data.dir   = df.stab[i,1],
pop = df.stab[i,46],
Gen= df.stab[i,2],
n.step = stablefrom(W))
df.stability <- rbind(df.stability, st)
}
hist(df.stability$n.step, breaks=9)
hist(df.stability$n.step, breaks=10)
hist(df.stability$n.step, breaks=8)
hist(df.stability$n.step, breaks=7)
hist(df.stability$n.step, breaks=5)
hist(df.stability$n.step, breaks=6)
source("../functions_R/All_functions.R")
library(png)
#####################
sims.dirs <- list.dirs("../../simul/fig_1de", recursive = FALSE)
modulo <- pi
#####################
#Data
df.fig1de <- df.data(sims.dirs, pattern = "../../simul/fig_1de/", variable="netw", file_size=15000, w_of_6=TRUE, network=FALSE)
netw_names <- as_labeller(c(
`3-grn` = "GRN model",
`2-fkl` = "FKL model",
`1-mult` = "Multilinear Model"
))
#With eccentricity
pfig1de <- ggplot(data=df.fig1de, aes(ang_S, ang_M))+
coord_fixed(ratio = 1, xlim = c(-1.5,1.5), ylim = c(-pi/2-0.2,pi/2+0.2), expand = TRUE, clip = "on")+
geom_abline(colour="#666666")+
geom_abline(intercept=pi, colour="#666666")+
geom_abline(intercept=-pi, colour="#666666")+
geom_point(aes(y=ang_M, col=ecc_M), alpha=0.2, show.legend = FALSE)+
geom_point(aes(y=ang_M_mpi, col=ecc_M), alpha=0.2, show.legend = FALSE)+
geom_point(aes(y=ang_M_ppi, col=ecc_M), alpha=0.2, show.legend = TRUE)+
labs(y=expression(paste("Direction of mutational effects ",alpha, "(M)")), x=expression(paste("Fitness function, ",alpha, "(S)")), fill = expression("\u03BE\u03B1"))+
scale_color_viridis_c(option = "plasma")+
labs(col = "M Eccentricity\ne(M)")+
scale_x_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))+
scale_y_continuous(breaks=c(0, pi/4, pi/2, -pi/4, -pi/2),
labels=c("0", "\u03c0/4", "\u03c0/2","-\u03c0/4", "-\u03c0/2"))
pfig1de <- pfig1de + facet_wrap(pop ~., labeller = as_labeller(netw_names),  ncol=3) + theme(strip.background = element_blank())+ theme_bw() #, strip.text = element_blank()
pfig1de
cairo_pdf("../../figures/fig1_de.pdf", width=7, height=4)
grid.arrange(
pfig1de,
ncol = 1,
nrow = 1,
widths = c(1),
clip = FALSE
)
dev.off()
source("../functions_R/All_functions.R")
#########################################
sims.dirs <- list.dirs("../../simul/fig_1abc", recursive = FALSE)
angle = c(0.785, 0, -0.393)
of        <- "fig1"
modulo <- pi
#####################
M.factor <- 1500
G.factor <- 1500
S.factor <- 1
#Df with generations
df.m.s.gen <- data.frame()
for (i in angle) {
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", i), full.names=TRUE)
df <- df.fig1(sims.dir, all.gen=TRUE)
pop <- str_split(df$data.dir, "../../simul/fig_1abc/", n=2, simplify = TRUE)
df[,9] <- sprintf("%s", pop[,2])
model <- str_split(pop[,2], "/simuangle", n=2, simplify = TRUE)
df[,10] <- sprintf("%s", model[,1])
df.m.s.gen <- rbind(df.m.s.gen, df)
}
df.m <- subset(df.m.s.gen, V10 == "m") #Df of Multilinear simulations
df.fkl <- subset(df.m.s.gen, V10 == "fkl")
df.w <- subset(df.m.s.gen, V10 == "w") #Df of Wagner simulations
# colors <- c("darkred", "darkblue", "yellowgreen")
colors <- c("darkblue", "yellowgreen")
# png(file="../../figures/fig1_part1.png", width=400, height=400)
# cairo_pdf("../../figures/fig1_a.pdf", width=6, height=6)
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", 0.785), full.names=TRUE)
# mar=c(0,0,0,0)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(0.785, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(0.785, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(0.785, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="", yaxt="n", ylab = expression(paste("Mutational effects direction ",alpha, "(M)")), xlab = "Generation", col=alpha(colors[factor(dfang1$V10)],0.2),mar=c(1, 1, 0, 1), mgp = c(1.75, 0.75, 0))
# for (i in unique(as.factor(dfang1$data.dir))) {
#   lines(  subset(dfang1, data.dir==i)$Gen,  subset(dfang1, data.dir==i)$ang_M, col=alpha(colors[factor(subset(dfang1, data.dir==i)$V10)],0.2)  )
# }
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
# lines(as.numeric(rownames(bymodel)), bymodel[,"fkl"], col="darkred", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
legend("bottomleft", lty=1, box.lty=0,  bg="transparent", col=c("yellowgreen", "darkblue", "orange"),
legend=c(paste0("M GRN"), paste0("M multilinear"),paste0("S")))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor, another_plot=TRUE,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="",xcoord=c(1000, 10000),ycoord=c(-2.5, 0.5),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE, Gell=TRUE,  mgp = c(0, 0, 0))
# dev.off()
########
#####################
M.factor <- 750
G.factor <- 1500
S.factor <- 1
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", 0.785), full.names=TRUE)
# mar=c(0,0,0,0)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(0.785, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(0.785, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(0.785, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="", yaxt="n", ylab = expression(paste("Mutational effects direction ",alpha, "(M)")), xlab = "Generation", col=alpha(colors[factor(dfang1$V10)],0.2),mar=c(1, 1, 0, 1), mgp = c(1.75, 0.75, 0))
# for (i in unique(as.factor(dfang1$data.dir))) {
#   lines(  subset(dfang1, data.dir==i)$Gen,  subset(dfang1, data.dir==i)$ang_M, col=alpha(colors[factor(subset(dfang1, data.dir==i)$V10)],0.2)  )
# }
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
# lines(as.numeric(rownames(bymodel)), bymodel[,"fkl"], col="darkred", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
legend("bottomleft", lty=1, box.lty=0,  bg="transparent", col=c("yellowgreen", "darkblue", "orange"),
legend=c(paste0("M GRN"), paste0("M multilinear"),paste0("S")))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor, another_plot=TRUE,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="",xcoord=c(1000, 10000),ycoord=c(-2.5, 0.5),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE, Gell=TRUE,  mgp = c(0, 0, 0))
def.s
M.factor <- 250
dev.off()
# png(file="../../figures/fig1_part1.png", width=400, height=400)
# cairo_pdf("../../figures/fig1_a.pdf", width=6, height=6)
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", 0.785), full.names=TRUE)
# mar=c(0,0,0,0)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(0.785, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(0.785, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(0.785, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="", yaxt="n", ylab = expression(paste("Mutational effects direction ",alpha, "(M)")), xlab = "Generation", col=alpha(colors[factor(dfang1$V10)],0.2),mar=c(1, 1, 0, 1), mgp = c(1.75, 0.75, 0))
# for (i in unique(as.factor(dfang1$data.dir))) {
#   lines(  subset(dfang1, data.dir==i)$Gen,  subset(dfang1, data.dir==i)$ang_M, col=alpha(colors[factor(subset(dfang1, data.dir==i)$V10)],0.2)  )
# }
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
# lines(as.numeric(rownames(bymodel)), bymodel[,"fkl"], col="darkred", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
legend("bottomleft", lty=1, box.lty=0,  bg="transparent", col=c("yellowgreen", "darkblue", "orange"),
legend=c(paste0("M GRN"), paste0("M multilinear"),paste0("S")))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor, another_plot=TRUE,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="",xcoord=c(1000, 10000),ycoord=c(-2.5, 0.5),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE, Gell=TRUE,  mgp = c(0, 0, 0))
# dev.off()
M.factor <- 300
# png(file="../../figures/fig1_part1.png", width=400, height=400)
# cairo_pdf("../../figures/fig1_a.pdf", width=6, height=6)
sims.dir  <- list.files(path=sims.dirs, pattern=sprintf("angle%s.parangle", 0.785), full.names=TRUE)
# mar=c(0,0,0,0)
dfang1 <- subset(df.m.s.gen, round(ang_S, 1) == round(0.785, 1))
dfm <- subset(df.m, round(ang_S, 1) == round(0.785, 1))
dfw <- subset(df.w, round(ang_S, 1) == round(0.785, 1))
plot(dfang1$Gen, dfang1$ang_M, ylim =c(-pi/2,pi/2), xlim = c(min(dfang1$Gen), max(dfang1$Gen)),
main="", yaxt="n", ylab = expression(paste("Mutational effects direction ",alpha, "(M)")), xlab = "Generation", col=alpha(colors[factor(dfang1$V10)],0.2),mar=c(1, 1, 0, 1), mgp = c(1.75, 0.75, 0))
# for (i in unique(as.factor(dfang1$data.dir))) {
#   lines(  subset(dfang1, data.dir==i)$Gen,  subset(dfang1, data.dir==i)$ang_M, col=alpha(colors[factor(subset(dfang1, data.dir==i)$V10)],0.2)  )
# }
df500 <- subset(dfang1, Gen >= 500)
bymodel <- by(df500$ang_M, list(df500$Gen, df500$V10), FUN=mean.angle.pi)
lines(as.numeric(rownames(bymodel)), bymodel[,"m"], col="darkblue", lwd = 3)
# lines(as.numeric(rownames(bymodel)), bymodel[,"fkl"], col="darkred", lwd = 3)
lines(as.numeric(rownames(bymodel)), bymodel[,"w"], col="yellowgreen", lwd = 3)
lines(dfang1$Gen, dfang1$ang_S, col="orange", type = "l", lty=3, lwd = 2) #S orientation
axis(side=2, at=c(-pi, -pi/2, -pi/4, 0 , pi/4, pi/2, pi), labels=expression(-pi, -pi/2, -pi/4, 0, pi/4, pi/2, pi), mgp = c(1.75, 0.75, 0))
legend("bottomleft", lty=1, box.lty=0,  bg="transparent", col=c("yellowgreen", "darkblue", "orange"),
legend=c(paste0("M GRN"), paste0("M multilinear"),paste0("S")))
oneplot.allellipse(sims.dir, G.factor=G.factor, S.factor=S.factor, M.factor=M.factor, another_plot=TRUE,
xlim=c(-7,7), ylim=c(-7,7), all.reps=FALSE, xlab="", ylab="",xcoord=c(1000, 10000),ycoord=c(-2.5, 0.5),
yaxt = "n", xaxt = "n", legend=legend, asp=1, axes = FALSE, Gell=TRUE,  mgp = c(0, 0, 0))
# dev.off()
########
